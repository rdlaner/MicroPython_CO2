"""
IO0: microcontroller.Pin = ...
D4: microcontroller.Pin = ...
IO18: microcontroller.Pin = ...
A1: microcontroller.Pin = ...
D15: microcontroller.Pin = ...
IO17: microcontroller.Pin = ...
A0: microcontroller.Pin = ...
D14: microcontroller.Pin = ...
IO14: microcontroller.Pin = ...
A2: microcontroller.Pin = ...
D16: microcontroller.Pin = ...
IO12: microcontroller.Pin = ...
A3: microcontroller.Pin = ...
D17: microcontroller.Pin = ...
IO6: microcontroller.Pin = ...
A4: microcontroller.Pin = ...
D18: microcontroller.Pin = ...
IO5: microcontroller.Pin = ...
A5: microcontroller.Pin = ...
D19: microcontroller.Pin = ...
IO36: microcontroller.Pin = ...
SCK: microcontroller.Pin = ...
D25: microcontroller.Pin = ...
IO35: microcontroller.Pin = ...
MOSI: microcontroller.Pin = ...
D24: microcontroller.Pin = ...
IO37: microcontroller.Pin = ...
MISO: microcontroller.Pin = ...
D23: microcontroller.Pin = ...
IO44: microcontroller.Pin = ...
D0: microcontroller.Pin = ...
RX: microcontroller.Pin = ...
IO43: microcontroller.Pin = ...
D1: microcontroller.Pin = ...
TX: microcontroller.Pin = ...
SDA: microcontroller.Pin = ...
IO8: microcontroller.Pin = ...
A11: microcontroller.Pin = ...
D21: microcontroller.Pin = ...
SCL: microcontroller.Pin = ...
IO9: microcontroller.Pin = ...
A12: microcontroller.Pin = ...
D22: microcontroller.Pin = ...
IO33: microcontroller.Pin = ...
D5: microcontroller.Pin = ...
IO38: microcontroller.Pin = ...
D6: microcontroller.Pin = ...
IO1: microcontroller.Pin = ...
D9: microcontroller.Pin = ...
A6: microcontroller.Pin = ...
IO3: microcontroller.Pin = ...
D10: microcontroller.Pin = ...
A7: microcontroller.Pin = ...
IO7: microcontroller.Pin = ...
D11: microcontroller.Pin = ...
A8: microcontroller.Pin = ...
IO10: microcontroller.Pin = ...
D12: microcontroller.Pin = ...
A9: microcontroller.Pin = ...
IO11: microcontroller.Pin = ...
D13: microcontroller.Pin = ...
A10: microcontroller.Pin = ...
LED: microcontroller.Pin = ...
BATTERY: microcontroller.Pin = ...
VBAT: microcontroller.Pin = ...
VBAT_SENSE: microcontroller.Pin = ...
VOLTAGE_MONITOR: microcontroller.Pin = ...
VBUS: microcontroller.Pin = ...
VBUS_SENSE: microcontroller.Pin = ...
NEOPIXEL_POWER: microcontroller.Pin = ...
NEOPIXEL: microcontroller.Pin = ...
IO4: microcontroller.Pin = ...
AMB: microcontroller.Pin = ...
LDO2: microcontroller.Pin = ...
IO39: microcontroller.Pin = ...
STEMMA_I2C: typing.Any = ...
"""
# TODO: Fill out w/ rest of capabilities

# Standard imports

# Third party imports
import neopixel
from machine import Pin, ADC
from micropython import const

# Local imports

# Globals
VBUS_SENSE_PIN = const(34)
VBAT_SENSE_PIN = const(2)
NEO_PIN = const(40)
LDO2_PIN = const(39)
LED_PIN = const(13)
AMB_LIGHT_PIN = const(4)
SPI_MOSI_PIN = const(35)
SPI_MISO_PIN = const(37)
SPI_CLK_PIN = const(36)
I2C_SDA_PIN = const(8)
I2C_SCL_PIN = const(9)


def rgb_color_wheel(wheel_pos):
    """Color wheel to allow for cycling through the rainbow of RGB colors."""
    wheel_pos = wheel_pos % 255

    if wheel_pos < 85:
        return (255 - wheel_pos * 3, 0, wheel_pos * 3)

    if wheel_pos < 170:
        wheel_pos -= 85
        return (0, wheel_pos * 3, 255 - wheel_pos * 3)

    wheel_pos -= 170
    return (wheel_pos * 3, 255 - wheel_pos * 3, 0)


class Peripherals():
    def __init__(self, enable_neo: bool = False) -> None:
        # LDO2 - NEOPIXEL_POWER is same pin as LD02
        # Second I2C bus and neopixel are powered via LDO2
        self._ld02 = Pin(LDO2_PIN, Pin.OUT)
        self._ld02.value(enable_neo)

        # LED pins
        self._led_pin = Pin(LED_PIN, Pin.OUT, value=0)

        # Neopixels
        # TODO: Fix this
        self.neopixels = neopixel.NeoPixel(Pin(NEO_PIN), 1)

        # Battery Voltage
        self._batt_monitor = ADC(Pin(VBAT_SENSE_PIN))

        # 5V sense
        self._vbus_sense = Pin(VBUS_SENSE_PIN, Pin.IN)

    def deinit(self) -> None:
        """Call deinit on all resources to free them"""
        pass

    @property
    def battery(self) -> float:
        """Return the voltage of the battery"""
        for _ in range(10):
            self._batt_monitor.read()
        measurement = self._batt_monitor.read()
        measurement /= 4095  # divide by 4095 as we are using the default ADC voltage range of 0-1.2V
        measurement *= 4.2  # Multiply by 4.2V, our max charge voltage for a 1S LiPo
        return round(measurement, 2)

    def led_on(self) -> None:
        """Turn on the LED"""
        self._led_pin.value(1)

    def led_off(self) -> None:
        """Turn off the LED"""
        self._led_pin.value(0)

    def led_toggle(self) -> None:
        """Toggle the LED"""
        self._led_pin.value(not self._led_pin.value())

    @property
    def ld02(self) -> bool:
        """Check if LDO2 is enabled or not"""
        return bool(self._ld02.value())

    @ld02.setter
    def ld02(self, value: bool) -> None:
        """Disable or enbale LDO2"""
        self._ld02.value(value)

    def usb_connected(self) -> bool:
        return self._vbus_sense.value() == 1
